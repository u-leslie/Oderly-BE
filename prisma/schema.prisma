// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  ADMIN
  USER
}

enum OrderEventStatus{
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User{
  id         String   @id @default(uuid())
  username   String   
  email      String   @unique
  phone      String   @unique
  password   String  
  role       Role      @default(USER)
  billingAddressId String?
  shippingAddressId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  addresses  Address[]
  cartItems  CartItem[]
  orders     Order[]

  @@map("users")
}

model Address{
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields:[userId],references:[id])
  street       String   
  country      String
  city         String   
  state        String   
  zipCode      String   
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())

}

model Product{
  id          String   @id @default(uuid())
  name        String   
  description String    @db.Text
  price       Float   
  tags        String    
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  cartItems  CartItem[]
  orders     OrderProduct[]

  @@map("products")
}

model CartItem{
  id        String     @id @default(uuid())
  userId      String
  user        User       @relation(fields:[userId],references:[id])
  productId   String
  product     Product    @relation(fields:[productId],references:[id])
  quantity    Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())

  @@map("cart_items")
}


model Order{
  id        String     @id @default(uuid())
  userId      String
  user        User       @relation(fields:[userId],references:[id])
  netAmount   Decimal
  address     String
  status    OrderEventStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  products  OrderProduct[]
  events     OrderEvent[]

  @@map("orders")
}

model OrderProduct{
  id        String     @id @default(uuid())
  orderId      String
  order       Order       @relation(fields:[orderId],references:[id])
  productId      String
  product     Product       @relation(fields:[productId],references:[id])
  quantity    Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())

  @@map("order_products")
}

model OrderEvent{
  id        String     @id @default(uuid())
  orderId      String
  order       Order       @relation(fields:[orderId],references:[id])
  status    OrderEventStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())

  @@map("order_events")
}